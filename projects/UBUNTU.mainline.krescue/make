#!/bin/bash

## hyphop ##

#= MANJARO LINK kresq project generator

DIR="$(dirname $0)"
BN=$(basename $0)

cd "$DIR"
DP="$(realpath .)"

#N=${DP%/*}
N=${DP}
N=${N##*/}
M=${N%.krescue}

M="../../img/$M"
MP="$(realpath $M)"

CMP_LEVEL="-22 -T2"

case $PATH in
    */opt/bin:*);;
    *)PATH="$(realpath ../../opt/bin):$PATH";;
esac

echo $PATH

#which xz
#which zstd
#which mksquashfs
#exit 0

DATE=$(date)

CONF=$BN.conf
COND=$BN.conf
COND=${COND#./}
VARIANT=
[ "$1" ] && {
[  -f "$1" ] || VARIANT=".$1"
}
[ -f "$1" ] && VARIANT="$1"
[ "${VARIANT##*/}" = "${CONF##*/}" ] && VARIANT=
[ "$VARIANT" ] || {
    [ -L $CONF ] && VARIANT=$(readlink $CONF)
}
VARIANT=${VARIANT#$COND}
echo "[i] VARIANT: $VARIANT">&2
CONF=$CONF$VARIANT
[ -f $CONF ] || {
    echo "[e] config $CONF missed">&2
    exit 1
}

M=$M$VARIANT

echo "[i] CONFIG $CONF">&2
. $CONF # config include

echo "[i] started $N -> $M">&2

#exit 0

mkdir -p "$M"

cd $M

DL="dl"
CNF_=krescue.image.conf
CNF=.$CNF_
R=README.txt
META=".meta"
BOOT="BOOT"
ROOT=.
ROOT=ROOT
ROOTFS=$ROOT/rootfs.img

CMD(){
    echo "# $@">&2
    $@
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}

[ "$z7r" ] || \
z7r="$(which 7zr)"
[ $? = 0 ] || FAIL 7zr not found! plz install it

[ "$mcopy" ] || \
mcopy="$(which mcopy)"
[ $? = 0 ] || FAIL mcopy not found ! plz install mtools

[ "$bsdtar" ] || \
bsdtar="$(which bsdtar)"
[ $? = 0 ] || FAIL bsdtar ! plz install bsdtar

[ "$xz" ] || \
xz="$(which pixz)"
[ $? = 0 ] || {
echo "[w] plz install pixz"
xz="$(which xz)"
[ $? = 0 ] || FAIL xz not found ! plz install xz or pixz
}

[ -f $R ] || {
    echo "[i] create README: $R">&2
    echo "# SOURCES
NAME:      $IMG
SOURCE:    $LINK0

IMAGE_URL: $LINK

## BUILD IMAGE

./make


" > $R
}

[ -f make ] || {
    ln -s ../../image/make_image make
}


[ -d $META ] || mkdir -p $META
[ -d $DL ] || mkdir -p $DL

../../scripts/download "$LINK" "$IMG" $DL || FAIL "download sd image check 
$LINK0
$IMG
!!! may be need update link !!!
or just put $IMG and *.md5sum to 
$DL => $(realpath $DL)
"

IMG_="$DL/$IMG"
IMG2="$DL/${IMG%.*}.img"


[ -f "$IMG2" ] || {
    echo "[i] unpack $IMG_">&2
    #7z e -so $IMG_ '*/*.img' > $IMG2
    #echo "$bsdtar -O -xf "$IMG_" '*/*.img' > $IMG2">&2
    $bsdtar -O -xf "$IMG_" '*/*.img' > $IMG2
}

[ -s "$IMG2" ] && {

echo "[i] extract $IMG2">&2

file $IMG2 | grep partition || {
    echo "[e] wrong disk image IMG$">&2
    exit 1 
}


START_PARTITION="$(file "$IMG2" | grep  -e "startsector [0-9]*" -o | grep -o -e "[0-9]*")"

S1=
S2=
for S2 in $START_PARTITION; do
    [ "$S1" ] || S1=$S2
done

[ "$S1" ] || FAIL partition1 not found $IMG2
[ "$S1" ] || FAIL partition2 not found $IMG2

echo "[i] PARTITIONS 1: $S1 2: $S2">&2

PART1=$(dd if=$IMG2 skip=$((S1)) count=10 2>/dev/null| file -)
echo "[i] PART1 $PART1">&2
UUID1=${PART1#*number}
UUID1=${UUID1%%,*}
UUID1=$(printf "%X" $(($UUID1)))
UUID1="${UUID1::4}-${UUID1:4:4}"

LABEL1=${PART1#*label:}
LABEL1=${LABEL1#*\"}
LABEL1=$(echo ${LABEL1%\"*})


echo "[i] PART1 : UUID: '$UUID_' LABEL: '$LABEL1'">&2

echo "
LABEL1=$LABEL1
UUID1=$UUID1_
LABEL2=$LABEL2
UUID2=$UUID2_
LABEL3=$LABEL3
UUID3=$UUID3_

UUID1_=$UUID1
UUID2_=$UUID2
UUID3_=$UUID3
" > $IMG2.conf

#
#
#
#

grep -q "mtools_skip_check=1" ~/.mtoolsrc || \
    echo mtools_skip_check=1 > ~/.mtoolsrc

[ -d  $BOOT.org ] || {
echo "[i] copy boot partition">&2
echo "#$mcopy -sbpmi $IMG2@@$((512*S1)) :: $BOOT.org"
$mcopy -sbpmi $IMG2@@$((512*S1)) :: $BOOT.org || FAIL extract boot partition to $BOOT.org
}

## generate kreq config


[ -d "$ROOT" ] || mkdir -p $ROOT

[ -f $ROOTFS ] || {
echo "[i] extract rootfs => $ROOTFS">&2
dd if=$IMG2 skip=$((S2)) of=$ROOTFS
file $ROOTFS | grep ext4 || FAIL not rootfs
#fsck.ext4 -y -f $ROOTFS || echo "[w] rootfs image check oops"
#resize2fs -M $ROOTFS
}

ls -l1

truncate -s0 $IMG2

}

#exit 0

for p in $ROOTFS; do
[ -s $p ] || continue
[ -L $p ] && continue
[ -f $p ] || continue
#[ -f $p.zstd ] && {
[ -f $p.packed ] && continue
#FAIL broken $p.zstd
#continue
#}
echo "[i] rootfs image compress">&2
#CMD ../../scripts/zstde $CMP_LEVEL $p $p.zstd || FAIL compress
#echo $p.zstd > $p.packed

CMD ../../scripts/xze -e -T4 -9 $p || FAIL compress
echo $p.xz > $p.packed

CMD truncate -s0 $p

done


echo "[i] prepare bootloaders">&2

BASE=https://github.com/hyphop/khadas-uboot-spi/releases/download/mainline-test/

for VIM in VIM1 VIM2 VIM3 VIM3L; do
    D=$BOOT.$VIM
    [ -d $D ] || mkdir -p $D
    UBOOT=u-boot.$VIM.sd.bin
    ../../scripts/download $BASE$UBOOT $UBOOT $D || FAIL download uboot
done


for v in 1 2 3 3l; do
    #echo "$BOOT.org/dtb/*/*vim$v.dtb > $BOOT.VIM${v/l/L}/dtb.img">&2
    cat $BOOT.org/dtb/*/*vim${v/1/}.dtb > $BOOT.VIM${v/l/L}/dtb.img
done

rm $BOOT.org/aml*
rm $BOOT.org/s905*
rm $BOOT.org/boot*

CMD rsync -a --inplace $DP/$BOOT/. $BOOT.org

CMD rsync --delete -a --inplace $DP/ROOT.* . 

echo "[i] copy kresq config from template $CNF_.tpl ($NAME $DATE)"
. $DP/$CNF_.tpl > $CNF || FAIL template not found

echo "[i] project is ready: $MP">&2

. $IMG2.conf

echo "[i] make image">&2
CMD ../../image/make_image

