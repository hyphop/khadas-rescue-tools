#!/bin/bash

## hyphop ##

#= COREELEC LINK kresq project generator

DIR="$(dirname $0)"
BN=$(basename $0)

cd "$DIR"
DP="$(realpath .)"

#N=${DP%/*}
N=${DP}
N=${N##*/}
M=${N%.krescue}

M="../../img/$M"
MP="$(realpath $M)"

CMP_LEVEL="-22 -T2"

case $PATH in
    */opt/bin:*);;
    *)PATH="$(realpath ../../opt/bin):$PATH";;
esac

DATE=$(date)

CONF=$BN.conf
COND=$BN.conf
COND=${COND#./}
VARIANT=
[ "$1" ] && {
[  -f "$1" ] || VARIANT=".$1"
}
[ -f "$1" ] && VARIANT="$1"
[ "${VARIANT##*/}" = "${CONF##*/}" ] && VARIANT=
[ "$VARIANT" ] || {
    [ -L $CONF ] && VARIANT=$(readlink $CONF)
}
VARIANT=${VARIANT#$COND}
echo "[i] VARIANT: $VARIANT">&2
CONF=$CONF$VARIANT
[ -f $CONF ] || {
    echo "[e] config $CONF missed">&2
    exit 1
}

M=$M$VARIANT

echo "[i] CONFIG $CONF">&2
. $CONF # config include

echo "[i] started $N -> $M">&2

#exit 0

mkdir -p "$M"

cd $M

DL="dl"
CNF_=krescue.image.conf
CNF=.$CNF_
R=README.txt
META=".meta"
BOOT="COREELEC"
ROOT=.
ROOT=ROOT

CMD(){
    echo "# $@">&2
    $@
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}


[ "$mcopy" ] || \
mcopy="$(which mcopy)"
[ $? = 0 ] || FAIL mcopy not found ! plz install mtools

[ -f $R ] || {
    echo "[i] create README: $R">&2
    echo "# SOURCES
NAME:      $IMG
SOURCE:    $LINK0

IMAGE_URL: $LINK

## BUILD IMAGE

./make


" > $R
}

[ -f make ] || {
    ln -s ../../image/make_image make
}

#[ -f "../$CNF" ] || {
    echo "[i] copy kresq config from template $CNF_.tpl ($NAME $DATE)"
#    CMD cp $DP/$CNF_ $CNF
#    CMD rsync -av --inplace  $DP/$CNF_ $CNF
    . $DP/$CNF_.tpl > $CNF || FAIL template not found
#

[ -d $META ] || mkdir -p $META
[ -d $DL ] || mkdir -p $DL

../../scripts/download "$LINK" "$IMG" $DL || FAIL "download sd image check 
$LINK0
$IMG
!!! may be need update link  !!!
or just put $IMG and *.md5sum to 
$DL => $(realpath $DL)
"

IMG_="$DL/$IMG"

#. $BOOT/boot.cfg

B_=$BOOT/$UBOOT_DTB_DIR
[ -d "$B_" ] || \
    mkdir -p "$B_"

## KERNET SYSTEM
tar -C$BOOT \
    --wildcards \
    --strip-components=2 \
    -xf $IMG_ \
    '*/target/*'

## INFO
tar -C$BOOT \
    --wildcards \
    --strip-components=1 \
    -xf $IMG_ \
    \*/RE* \
    \*/CHANGELOG \
    \*/licenses

## DTB

tar -C$BOOT/$UBOOT_DTB_DIR \
    --wildcards \
    --strip-components=3 \
    -xf $IMG_ \
    '*/*/bootloader'

#    '*/*/*/*/*khadas*'

echo "[i] prepare bootloaders">&2

[ -d .boot ] || {
    tar -xf $DP/blobs/.boot.tar.gz
}

#CMD mkdir -p $BOOT/$UBOOT_DTB_DIR

#cp $BOOT.org/$UBOOT_DTB_VIM1  $BOOT/$UBOOT_DTB_VIM1
#cp $BOOT.org/$UBOOT_DTB_VIM2  $BOOT/$UBOOT_DTB_VIM2
#cp $BOOT.org/$UBOOT_DTB_VIM3  $BOOT/$UBOOT_DTB_VIM3
#cp $BOOT.org/$UBOOT_DTB_VIM3L $BOOT/$UBOOT_DTB_VIM3L

echo $LABEL > $BOOT/LABEL
echo $LABEL > $BOOT/$LABEL.label

CMD rsync -a --inplace $DP/BOOT/ $BOOT

## FIXUP
CMD mv $BOOT/KERNEL $BOOT/kernel.img
dd if=$BOOT/Khadas_VIM3_cfgload bs=72 skip=1 > $BOOT/cfgload.cmd
CMD cp $BOOT/Khadas_VIM3_cfgload $BOOT/cfgload

(
cat $BOOT/boot.ini.0.header
dd if=$BOOT/aml_autoscript bs=72 skip=1
) > $BOOT/boot.ini


#cat $BOOT/boot.ini.header $BOOT/cfgload.cmd > $BOOT/boot.ini

##

[ -d OVERLAY.VIM3 ] || \
mkdir -p OVERLAY.VIM3
[ -d OVERLAY.VIM3L ] || \
mkdir -p OVERLAY.VIM3L

[ -d $BOOT/device_trees ] && {
CMD cp $BOOT/device_trees/g12b_a311d_khadas_vim3.dtb OVERLAY.VIM3/dtb.img
CMD cp $BOOT/device_trees/sm1_s905d3_khadas_vim3l.dtb OVERLAY.VIM3L/dtb.img
mkdir -p $BOOT/dtb
cp $BOOT/device_trees/*khadas*.dtb $BOOT/dtb
rm -rf $BOOT/device_trees
}

[ "$FIX_GREEN" ] && {
echo "[i] FIX GREEN"
grep -q use_rgb_to_yuv=1 $BOOT/config.ini || \
echo use_rgb_to_yuv=1 >> $BOOT/config.ini
}

CMD rsync --delete -a --inplace $DP/STORAGE .

cp $DP/README/. $BOOT

echo "[i] project is ready: $MP">&2

echo "[i] make image">&2
CMD ../../image/make_image

