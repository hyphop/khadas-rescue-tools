#!/bin/sh

## hyphop ##

#= MANJARO LINK kresq project generator

DIR="$(dirname $0)"
DP="$(realpath $DIR)"
#N=${DP%/*}
N=${DP}
N=${N##*/}
M=${N%.krescue}
M="../../img/$M"
MP="$(realpath $M)"

CMP_LEVEL="-22 -T2"

LABEL=MANJARO

DATE=$(date)

CONF=$0.conf
COND=$0.conf
COND=${COND#./}
VARIANT=
[ "$1" ] && {
[  -f "$1" ] || VARIANT=".$1"
}
[ -f "$1" ] && VARIANT="$1"
[ "${VARIANT##*/}" = "${CONF##*/}" ] && VARIANT=
[ "$VARIANT" ] || {
    [ -L $CONF ] && VARIANT=$(readlink $CONF)
}
VARIANT=${VARIANT#$COND}
echo "[i] VARIANT: $VARIANT">&2
CONF=$CONF$VARIANT
[ -f $CONF ] || {
    echo "[e] config $CONF missed">&2
    exit 1
}

M=$M$VARIANT

echo "[i] CONFIG $CONF">&2
. $CONF # config include

echo "[i] started $N -> $M">&2

exit 0

mkdir -p "$M"

cd $M

DL="dl"
CNF_=krescue.image.conf
CNF=.$CNF_
R=README.txt
META=".meta"
BOOT="BOOT"
ROOT=.
ROOT=ROOT
ROOTFS=$ROOT/rootfs.img

CMD(){
    echo "# $@">&2
    $@
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}

[ "$z7r" ] || \
z7r="$(which 7zr)"
[ $? = 0 ] || FAIL 7zr not found! plz install it

[ "$mcopy" ] || \
mcopy="$(which mcopy)"
[ $? = 0 ] || FAIL mcopy not found ! plz install mtools

[ "$sfdisk" ] || \
sfdisk="$(which sfdisk)"
[ $? = 0 ] || FAIL sfdisk not found ! plz install it

[ "$xz" ] || \
xz="$(which pixz)"
[ $? = 0 ] || {
echo "[w] plz install pixz"
xz="$(which xz)"
[ $? = 0 ] || FAIL xz not found ! plz install xz or pixz
}

[ -f $R ] || {
    echo "[i] create README: $R">&2
    echo "# SOURCES
NAME:      $IMG
SOURCE:    $LINK0

IMAGE_URL: $LINK

## BUILD IMAGE

./make


" > $R
}

[ -f make ] || {
    ln -s ../../image/make_image make
}

#[ -f "../$CNF" ] || {
    echo "[i] copy kresq config from template $CNF_.tpl ($NAME $DATE)"
#    CMD cp $DP/$CNF_ $CNF
#    CMD rsync -av --inplace  $DP/$CNF_ $CNF
    . $DP/$CNF_.tpl > $CNF
#

[ -d $META ] || mkdir -p $META
[ -d $DL ] || mkdir -p $DL

../../scripts/download "$LINK" "$IMG" $DL || FAIL "download sd image check 
$LINK0
$IMG
!!! may be need update yandex link for curl !!!
or just put $IMG and *.md5sum to 
$DL => $(realpath $DL)
"

IMG_="$DL/$IMG"
IMG2="$DL/${IMG%.*}"

[ -f "$IMG2" ] || {
    echo "[i] unpack $IMG_">&2
#    echo "[i] 7zr -so e $IMG_ > $IMG2">&2
#    $z7r -so e "$IMG_" > $IMG2 || DIE
    echo "[i] xz -dc $IMG_ > $IMG2">&2
    $xz -dc < "$IMG_" > $IMG2 || FAIL extract
}


[ -s "$IMG2" ] && {

echo "[i] extract $IMG2">&2

file $IMG2 | grep partition || {
    echo "[e] wrong disk image IMG$">&2
    exit 1 
}

$sfdisk $IMG2 --dump

S1="$($sfdisk $IMG2 --dump | grep type=c)"
S1=${S1#*start=}
S1=${S1%%,*}
S1=$(echo $S1)

echo mtools_skip_check=1 > ~/.mtoolsrc

[ -d  $BOOT.org ] || {
echo "[i] copy boot partition">&2
$mcopy -sbpmi $IMG2@@$((512*S1)) :: $BOOT.org || FAIL extract boot partition to $BOOT.org
}

S2="$($sfdisk $IMG2 --dump | grep type=83)"
S2=${S2#*start=}
S2=${S2%%,*}
S2=$(echo $S2)

[ -d "$ROOT" ] || mkdir -p $ROOT

[ -f $ROOTFS ] || {
echo "[i] extract rootfs => $ROOTFS">&2
dd if=$IMG2 skip=$((S2)) of=$ROOTFS
fsck.ext4 -f $ROOTFS || FAIL rootfs image check
#resize2fs -M $ROOTFS
}

ls -l1

truncate -s0 $IMG2

}

for p in $ROOTFS; do
[ -s $p ] || continue
[ -L $p ] && continue
[ -f $p ] || continue
#[ -f $p.zstd ] && {
[ -f $p.packed ] && continue
#FAIL broken $p.zstd
#continue
#}
echo "[i] rootfs image compress">&2
#CMD ../../scripts/zstde $CMP_LEVEL $p $p.zstd || FAIL compress
#echo $p.zstd > $p.packed

CMD ../../scripts/xze -e -T4 -9 $p || FAIL compress
echo $p.xz > $p.packed

CMD truncate -s0 $p

done


echo "[i] prepare bootloaders">&2

BASE=https://github.com/hyphop/khadas-uboot-spi/releases/download/mainline-test/

for VIM in VIM1 VIM2 VIM3 VIM3L; do
    D=$BOOT.$VIM
    [ -d $D ] || mkdir -p $D
    UBOOT=u-boot.$VIM.sd.bin
    ../../scripts/download $BASE$UBOOT $UBOOT $D || FAIL download uboot
done

[ -d "$BOOT.org" ] && {

echo "[i] prepare boot">&2

CMD cp -a $DP/$BOOT .

. $BOOT/boot.cfg

CMD mkdir -p $BOOT/$UBOOT_DTB_DIR

cp $BOOT.org/$UBOOT_KERNEL    $BOOT
cp $BOOT.org/$UBOOT_UINITRD   $BOOT

cp $BOOT.org/$UBOOT_DTB_VIM1  $BOOT/$UBOOT_DTB_VIM1
cp $BOOT.org/$UBOOT_DTB_VIM2  $BOOT/$UBOOT_DTB_VIM2
cp $BOOT.org/$UBOOT_DTB_VIM3  $BOOT/$UBOOT_DTB_VIM3
cp $BOOT.org/$UBOOT_DTB_VIM3L $BOOT/$UBOOT_DTB_VIM3L

echo $LABEL > $BOOT/LABEL
echo $LABEL > $BOOT/$LABEL.label

rm -rf $BOOT.org

ls -l1 $BOOT

}

[ -d "$BOOT" ] || FAIL $BOOT dir was removed

echo "[i] project is ready: $MP">&2

echo "[i] make image">&2
CMD ../../image/make_image

