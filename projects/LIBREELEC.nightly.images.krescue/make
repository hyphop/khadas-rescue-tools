#!/bin/bash

## hyphop ##

#= LIBREELEC LINK kresq project generator

DIR="$(dirname $0)"
BN=$(basename $0)

cd "$DIR"
DP="$(realpath .)"

#N=${DP%/*}
N=${DP}
N=${N##*/}
M=${N%.krescue}

M="../../img/$M"
MP="$(realpath $M)"

CMP_LEVEL="-22 -T2"

case $PATH in
    */opt/bin:*);;
    *)PATH="$(realpath ../../opt/bin):$PATH";;
esac

echo $PATH

DATE=$(date)

CONF=$BN.conf
COND=$BN.conf
COND=${COND#./}
VARIANT=
[ "$1" ] && {
[  -f "$1" ] || VARIANT=".$1"
}
[ -f "$1" ] && VARIANT="$1"
[ "${VARIANT##*/}" = "${CONF##*/}" ] && VARIANT=
[ "$VARIANT" ] || {
    [ -L $CONF ] && VARIANT=$(readlink $CONF)
}
VARIANT=${VARIANT#$COND}
echo "[i] VARIANT: $VARIANT">&2
CONF=$CONF$VARIANT
[ -f $CONF ] || {
    echo "[e] config $CONF missed">&2
    exit 1
}

M=$M$VARIANT

echo "[i] CONFIG $CONF">&2
. $CONF # config include

echo "[i] started $N -> $M">&2

#exit 0

mkdir -p "$M"

cd $M

DL="dl"
CNF_=krescue.image.conf
CNF=.$CNF_
R=README.txt
META=".meta"
BOOT="BOOT"
ROOT=.
ROOT=ROOT
ROOTFS=$ROOT/rootfs.img

CMD(){
    echo "# $@">&2
    $@
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}

[ "$mcopy" ] || \
mcopy="$(which mcopy)"
[ $? = 0 ] || FAIL mcopy not found ! plz install mtools

[ -f $R ] || {
    echo "[i] create README: $R">&2
    echo "# SOURCES
NAME:      $IMG
SOURCE:    $LINK0

IMAGE_URL: $LINK

## BUILD IMAGE

./make


" > $R
}

[ -f make ] || {
    ln -s ../../image/make_image make
}

MATCH=
for VIM in $BOARDS; do
MATCH="BOARD=$VIM $MATCH"
done

echo "[i] copy kresq config from template $CNF_.tpl ($NAME $DATE)"
. $DP/$CNF_.tpl > $CNF || FAIL template not found

[ -d $META ] || mkdir -p $META
[ -d $DL ] || mkdir -p $DL

../../scripts/download "$LINK" "$IMG" $DL || FAIL "download sd image check 
$LINK0
$IMG
!!! may be need update link  !!!
or just put $IMG and *.md5sum to 
$DL => $(realpath $DL)
"

IMG_="$DL/$IMG"

[ "$gzip" ] || \
gzip=$(which pigz)
[ "$gzip" ] || \
gzip=$(which gzip)
[ "$gzip" ] || FAIL not found gzip or pigz

UNPACKER="$gzip -dc"

START_PARTITION="$( $UNPACKER "$IMG_" | dd count=2 2>/dev/null | \
    file - | grep  -e "startsector [0-9]*" -o | grep -o -e "[0-9]*" )"

S1=
S2=
S3=
for S3 in $START_PARTITION; do
    [ "$S2" != "$S1" ] || S2=$S3
    [ "$S1"          ] || S1=$S3
done

[ "$S1" ] || FAIL partition1 not found in $IMG
[ "$S2" ] || FAIL partition2 not found in $IMG

echo "[i] PARTITIONS 1: $S1 2: $S2 3: $S3">&2

PART1=$($UNPACKER "$IMG_" | dd skip=$((S1)) count=10 2>/dev/null| file -)
#echo "[i] PART1 $PART1">&2
UUID1=${PART1#*number}
UUID1=${UUID1%%,*}
UUID1=$(printf "%X" $(($UUID1)))
UUID1="${UUID1::4}-${UUID1:4:4}"
LABEL1=${PART1#*label:}
LABEL1=${LABEL1#*\"}
LABEL1=$(echo ${LABEL1%\"*})

echo "[i] PART1 : UUID: '$UUID1' LABEL: '$LABEL1'">&2

grep -q "mtools_skip_check=1" ~/.mtoolsrc || \
    echo mtools_skip_check=1 > ~/.mtoolsrc

#[ -d $BOOT ] || {
rm -rf $BOOT
[ -d $BOOT ] || \
mkdir -p $BOOT

IMG_p1=/tmp/$IMG.part1
echo "[i] unpack boot partition">&2
$UNPACKER "$IMG_" | dd skip=$((S1)) count=$((S2-S1)) 2>/dev/null > $IMG_p1
$mcopy -sbpmi $IMG_p1@@$((0)) :: $BOOT || FAIL extract boot partition to $BOOT

#rm $IMG_p1

#}


#B_=$BOOT/$UBOOT_DTB_DIR
#[ -d "$B_" ] || \
#    mkdir -p "$B_"

#rsync -av --inplace $DP/$BOOT .
#. $BOOT/boot.cfg

## generate kreq config

exit 0

echo "[i] prepare bootloaders">&2

BASE=https://github.com/hyphop/khadas-uboot-spi/releases/download/mainline-test/

for VIM in $BOARDS; do
    D=$BOOT.$VIM
    [ -d $D ] || mkdir -p $D
    UBOOT=u-boot.$VIM.sd.bin
    ../../scripts/download $BASE$UBOOT $UBOOT $D || FAIL download uboot
done


#CMD mkdir -p $BOOT/$UBOOT_DTB_DIR
#cp $BOOT/$UBOOT_DTB_DIR/*khadas* $BOOT

for VIM in $BOARDS; do
    E=$BOOT.$VIM/extlinux
    [ -d $E ] || \
    CMD mkdir -p $E

    eval FDT=\$UBOOT_DTB_$VIM
    echo "[i] fdt: $FDT">&2
    . $BOOT/extlinux/extlinux.conf.tpl > $E/extlinux.conf

done

echo $LABEL > $BOOT/LABEL
echo $LABEL > $BOOT/$LABEL.label

CMD rsync --delete -a --inplace $DP/STORAGE .

echo "[i] project is ready: $MP">&2

echo "[i] make image">&2
CMD ../../image/make_image

