#!/bin/bash

## hyphop ##

#= VOLUMIO krescue project generator

DL="dl"
CNF_=krescue.image.conf
CNF=.$CNF_
R=README.kresq.txt
BOOT=BOOT
VBOOT=VBOOT
VIMAGE=VIMAGE
VDATA=VDATA
ROOTFS=rootfs.img

### PRE

DIR="$(dirname $0)"
BN=$(basename $0)

cd "$DIR"
DP="$(realpath .)"

#N=${DP%/*}
N=${DP}
N=${N##*/}
M=${N%.krescue}
M="../../img/$M"

CMP_LEVEL="-22 -T2"

case $PATH in
    */opt/bin:*);;
    *)PATH="$(realpath ../../opt/bin):$PATH";;
esac

REBUILD_ALL=

DATE=$(date)

CONF=$BN.conf
COND=$BN.conf
COND=${COND#./}
VARIANT=
v=

CMD(){
    echo "# $@">&2
    $@
}

FAIL(){
    echo "[e] $@">&2
    exit 1
}

for v_ in $@; do
    case $v_ in
	-r)
	REBUILD_ALL=1
	;;
	*)
	v=$v_
	;;
    esac
done

[ "$v" ] && {
[ -f "$v" ] || VARIANT=".$v"
}
[ -f "$v" ] && VARIANT="$v"
[ "${VARIANT##*/}" = "${CONF##*/}" ] && VARIANT=
[ "$VARIANT" ] || {
    [ -L $CONF ] && VARIANT=$(readlink $CONF)
}

VARIANT=${VARIANT#$COND}
echo "[i] VARIANT: $VARIANT">&2
CONF=$CONF$VARIANT
[ -f $CONF ] || {
    echo "[e] config $CONF missed">&2
    exit 1
}

M="$M$VARIANT"

echo "[i] CONFIG $CONF">&2
. $CONF # config include

echo "[i] system $(uname -a)">&2
echo "[i] started $N -> $M">&2

[ -d "$M" ] || \
CMD mkdir -p "$M" || FAIL last cmd
CMD cd $M || FAIL last cmd

MP="$(realpath .)"
M_=$(pwd)

[ "$MP" = "$M_" ] || FAIL "working path $M => $MP != $M_"

[ "$REBUILD_ALL" ] && {
    
    echo "[i] clean all and full rebuild again?">&2
    pwd
    ls -l1
    echo "[i] press enter or Ctrl+C exit">&2
    read $ASK || exit 1

    for f in * .*; do
	case $f in
	    dl)
	    CMD rm -rf dl/*.img dl/*.img.conf
	    continue
	    ;;
	    .|..)
	    continue
	    ;;
	esac
	CMD rm -rf $f
    done
}

## CHECK AND SCAN REQUIRE TOOLS

[ "$mcopy" ] || \
mcopy="$(which mcopy)"
[ $? = 0 ] || FAIL mcopy not found ! plz install mtools

[ "$unzip" ] || \
unzip="$(which unzip)"
[ $? = 0 ] || FAIL unzip ! plz install unzip

[ "$e2cp" ] || \
e2cp="$(which e2cp)"
[ $? = 0 ] || FAIL e2cp ! plz install e2tools

[ "$e2ls" ] || \
e2ls="$(which e2ls)"
[ $? = 0 ] || FAIL e2ls ! plz install e2tools

[ "$mkimage" ] || \
mkimage="$(which mkimage)"
[ $? = 0 ] || FAIL mkimage ! plz install mkimage 

##
## BEGIN
##

echo "[i] GENERATE kresq project...">&2

[ -d "$VIMAGE" ] || mkdir -p $VIMAGE
[ -d "$VDATA" ] || mkdir -p $VDATA

[ -f $R ] || {
    echo "[i] create README: $R">&2
    echo "# SOURCES
NAME:      $IMG
SOURCE:    $LINK0

IMAGE_URL: $LINK

## BUILD IMAGE

./make


" > $R
}

[ -e make ] || {
    ln -s ../../image/make_image make
}

[ -d $META ] || mkdir -p $META
[ -d $DL ] || mkdir -p $DL

## use predownloaded
[ -s $DL/$IMG ] || {
[ -f "$DP/work/$IMG" ] && {
    echo "[i] copy from preloaded "$DP/work/$IMG" "$DL"">&2
    cp "$DP/work/$IMG" "$DL"
    md5sum "$DL/$IMG" > "$DL/$IMG.md5sum"
}
}

## download image
../../scripts/download "$LINK" "$IMG" $DL || FAIL "download sd image check
$LINK0
$IMG
!!! may be need update link !!!
or just put $IMG and *.md5sum to 
$DL => $(realpath $DL)
"

IMG_="$DL/$IMG"
IMG2="$DL/${IMG%.*}"

## UNPACK 
[ -f "$IMG2" ] || {
    echo "[i] unpack $IMG_">&2
    $unzip -p "$IMG_" '*.img' > $IMG2
}

## EXTRACT
[ -s "$IMG2" ] && {

echo "[i] extract $IMG2">&2

file $IMG2 | grep partition || {
    echo "[e] wrong disk image IMG$">&2
    exit 1 
}

## SCAN IMAGE PARTITIONS
START_PARTITION="$(file "$IMG2" | grep  -e "startsector [0-9]*" -o | grep -o -e "[0-9]*")"

S1=
S2=
S3=
for S3 in $START_PARTITION; do
    [ "$S2" != "$S1" ] || S2=$S3
    [ "$S1"          ] || S1=$S3
done

[ "$S1" ] || FAIL partition1 not found $IMG2
[ "$S2" ] || FAIL partition2 not found $IMG2
[ "$S3" ] || FAIL partition3 not found $IMG2

echo "[i] PARTITIONS 1: $S1 2: $S2 3: $S3">&2

PART1=$(dd if=$IMG2 skip=$((S1)) count=10 2>/dev/null| file -)
#echo "[i] PART1 $PART1">&2
UUID1=${PART1#*number}
UUID1=${UUID1%%,*}
UUID1=$(printf "%X" $(($UUID1)))
UUID1="${UUID1::4}-${UUID1:4:4}"
LABEL1=${PART1#*label:}
LABEL1=${LABEL1#*\"}
LABEL1=$(echo ${LABEL1%\"*})

echo "[i] PART1 : UUID: '$UUID1' LABEL: '$LABEL1'">&2

PART2=$(dd if=$IMG2 skip=$((S2)) count=10 2>/dev/null| file -)
#echo "[i] PART2 $PART2">&2
UUID2=${PART2#*UUID=}
UUID2=${UUID2%%,*}
LABEL2=${PART2#*label:}
LABEL2=${LABEL2#*\"}
LABEL2=$(echo ${LABEL2%\"*})

echo "[i] PART2 : UUID: '$UUID2' LABEL: '$LABEL2'">&2

PART3=$(dd if=$IMG2 skip=$((S3)) count=10 2>/dev/null| file -)
#echo "[i] PART1 $PART3">&2
UUID3=${PART3#*UUID=}
UUID3=${UUID3%%,*}
LABEL3=${PART3#*label:}
LABEL3=${LABEL3#*\"}
LABEL3=$(echo ${LABEL3%\"*})


echo "
LABEL1=$LABEL1
UUID1=$UUID1
LABEL2=$LABEL2
UUID2=$UUID2
LABEL3=$LABEL3
UUID3=$UUID3
" > $IMG2.conf

echo "[i] PART3 : UUID: '$UUID3' LABEL: '$LABEL3'">&2

## COPY 1st partition files
grep -q "mtools_skip_check=1" ~/.mtoolsrc || \
    echo mtools_skip_check=1 > ~/.mtoolsrc

[ -d $VBOOT ] || \
    mkdir -p $VBOOT

[ -d $VBOOT.org ] || {
echo "[i] copy boot partition">&2
echo "#$mcopy -sbpmi $IMG2@@$((512*S1)) :: $VBOOT.org"
$mcopy -sbpmi $IMG2@@$((512*S1)) :: $VBOOT.org || FAIL extract boot partition to $VBOOT.org
#rm $VBOOT/uboot/*.bin
ls -la $VBOOT.org
}

## extract 2nd part
[ -f $ROOTFS ] || {
echo "[i] extract rootfs => $ROOTFS">&2
dd if=$IMG2 skip=$((S2)) of=$ROOTFS
file $ROOTFS | grep ext4 || FAIL not rootfs
}

$e2ls $ROOTFS || FAIL broken fs image

## COPY 2st partition files
for e in remoteConfig volumio_current.sqsh; do
    $e2cp $ROOTFS:$e $VIMAGE/$e || FAIL $e not found 
done

## MINIMIZE
CMD truncate -s0 $IMG2
CMD truncate -s0 $ROOTFS

}


UBOOT_DL(){

for VIM in VIM1 VIM2 VIM3 VIM3L; do
    #D=$BOOT.$VIM
    [ -d $D ] || mkdir -p $D
    UBOOT=u-boot.$VIM.sd.bin
    ../../scripts/download $BASE$UBOOT $UBOOT $D || FAIL download uboot
    rm $D/*.headers 2>/dev/null
done

}

## DOWNLOAD BOOTLOADERS
[ "1" ] && {

echo "[i] prepare mainline bootloaders">&2
BASE=https://github.com/hyphop/khadas-uboot-spi/releases/download/mainline-test/
D=$VBOOT/uboot-mainline
UBOOT_DL

echo "[i] prepare legacy bootloaders">&2
BASE=https://github.com/hyphop/khadas-uboot-spi/releases/download/vim_legacy/
D=$VBOOT/uboot
UBOOT_DL

}

## READ PROJECT CONFIG
. $IMG2.conf


## NO NEED JUST FOR DEVELOPER TESTS
[ "$SPEEDUP" ] && {
echo "[i] speed up bootup"
## speed up boot
touch $VIMAGE/kernel_current.tar
touch $VIMAGE/kernel_factory.tar
[ -L $VIMAGE/volumio_factory.sqsh ] || \
ln -s volumio_current.sqsh $VIMAGE/volumio_factory.sqsh
################
}

# krescue files
mkdir -p .boot/VIM1 .boot/VIM2 .boot/VIM3 .boot/VIM3L		2>/dev/null
ln -sf ../../$VBOOT/dtb/kvim_linux.dtb		.boot/VIM1/dtb	2>/dev/null
ln -sf ../../$VBOOT/dtb/kvim2_linux.dtb		.boot/VIM2/dtb	2>/dev/null
ln -sf ../../$VBOOT/dtb/kvim3_linux.dtb		.boot/VIM3/dtb	2>/dev/null
ln -sf ../../$VBOOT/dtb/kvim3l_linux.dtb	.boot/VIM3L/dtb	2>/dev/null

SYNC="rsync -a --inplace"

# copy kernel + dtb + initrd
CMD $SYNC $VBOOT.org/Image	$VBOOT
CMD $SYNC $VBOOT.org/uInitrd	$VBOOT
CMD $SYNC $VBOOT.org/dtb	$VBOOT

# fix fdt audio
CMD $DP/scripts/dtb_fix		$VBOOT/dtb/*.dtb

# copy boot files configs
CMD $SYNC $DP/BOOT/.		$VBOOT

# addition boot script for wide boots # maybe no need 
#grep -v KHADAS-UBOOT-CONFIG \
#    $DP/BOOT/boot.ini > 	$VBOOT/boot.cmd
#$mkimage -C none -A arm -T \
#    script -d $VBOOT/boot.cmd	$VBOOT/s905_autoscript

# generate system env
. $DP/env.system.txt.tpl >	$VBOOT/env.system.txt

# copy env + user env
#CMD $SYNC $DP/env.txt		$VBOOT

#( . $DP/env.system.txt.tpl
#cat $DP/BOOT/env.txt )>		$VBOOT/env.txt

CMD cp $DP/env.txt		$VBOOT
CMD cp $DP/env.user.txt		$VBOOT

#CMD $SYNC $DP/env.user.txt	$VBOOT

# copy additional files
CMD $SYNC $DP/.meta		.
CMD $SYNC $DP/README/.		$VBOOT

CMD $SYNC --delete $DP/OVER*	.

## GENERATE KRESQ CONFIG
echo "[i] copy kresq config from template $CNF_.tpl ($NAME $DATE)"
. $DP/$CNF_.tpl > $CNF || FAIL template not found

echo "[i] project is ready: $MP">&2
echo "[i] make image...">&2

CMD ../../image/make_image

##
## END
##